{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAKaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EACbC,mBAAS,IADI,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAkBjD,OACG,0BAAMC,SAZY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAQd,2BACGO,KAAK,OACLC,MAAQT,EACRU,SApBiB,SAACP,GACxBF,EAAeE,EAAEQ,OAAOF,Y,uBCRjBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,+DAIII,MAAOF,GAJX,cAIdG,EAJc,gBAKGA,EAAUC,OALb,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXpB,kBAebM,GAfa,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGlC,OACG,yBAAKc,UAAU,0CACZ,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCJDO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECDd,SAAEA,GAAe,IAAD,EACfd,mBAAS,CAChCqB,KAAM,GACNa,SAAS,IAH6B,mBAClCC,EADkC,KAC3BC,EAD2B,KAkBzC,OAZAC,qBAAW,WAERxB,EAASC,GACLwB,MAAM,SAAAC,GACJH,EAAS,CACNf,KAAMkB,EACNL,SAAS,SAIlB,CAAEpB,IAEEqB,EDf0BK,CAAc1B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAErB,OACG,oCACG,4BAAMpB,GAEJoB,GAAW,yCAEb,yBAAKJ,UAAU,oDAETH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACGiB,IAAMjB,EAAIC,IACLD,UEdbkB,EAAe,WAAO,IAAD,EAGK1C,mBAAS,CAAC,SAHf,mBAGxB2C,EAHwB,KAGZ5C,EAHY,KAO/B,OACG,oCACG,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEM4C,EAAWpB,KAAK,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACG2B,IAAM3B,EACNA,SAAWA,U,MCjBhC8B,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.62888550.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ( { setCategories } ) => {\n   const [inputValue, setInputValue] = useState('');\n\n   const handleInputChange = (e) => {\n      setInputValue( e.target.value );\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      \n      if( inputValue.trim().length > 2){\n         setCategories( cat => [ inputValue, ...cat]);\n         setInputValue('');\n      }\n\n      \n   };\n\n   return (\n      <form onSubmit={ handleSubmit }>\n         <input \n            type=\"text\"\n            value={ inputValue }\n            onChange={ handleInputChange }\n         />\n      </form>\n   )\n}\n\nAddCategory.propTypes = {\n   setCategories: PropTypes.func.isRequired,\n};\n\n","\nexport const getGifs = async ( category ) => {  \n\n   const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=0FVqDhQfdNm2FiXdjfYTQRqErToeWCYX&limit=10`;\n   \n   const respuesta = await fetch( url );\n   const { data } = await respuesta.json();\n\n   const gifs = data.map( img => {\n      return {\n         id: img.id,\n         title: img.title,\n         url: img.images?.downsized_medium.url\n      }\n   });\n\n   return gifs;\n};","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n\n\n   return (\n      <div className='card animate__animated animate__fadeIn' >\n         <img src={ url } alt={ title } />\n         <p>{ title }</p>\n      </div>\n   )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category }) => {\n\n   const { data:images, loading } = useFetchGifs( category );\n\n   return (\n      <>\n         <h3>{ category }</h3>\n\n         { loading && <p>Loading...</p>}\n\n         <div className='card-grid animate__animated animate__slideInLeft'>    \n            {\n               images.map( img => (\n                  <GifGridItem \n                     key={ img.id }\n                     { ...img }\n                  />\n               ))\n            }\n         </div>\n      </>\n   )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n   const [state, setstate] = useState({\n      data: [],\n      loading: true\n   });\n\n   useEffect( () => {\n      \n      getGifs( category )\n         .then( imgs => {\n            setstate({\n               data: imgs,\n               loading: false\n            })\n         });\n\n   }, [ category ]);\n\n   return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\n\nexport const GifExpertApp = () => {\n\n   \n   const [categories, setCategories] = useState(['Hola'])\n   \n\n\n   return (\n      <>\n         <h2>Busca un Gif</h2>\n         <AddCategory setCategories= { setCategories } />\n         <hr />\n         \n         <ol>\n            {\n               categories.map( category => \n                  <GifGrid\n                     key={ category } \n                     category={ category } \n                  />\n               )\n            }\n         </ol>\n\n      </>\n   )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './Components/GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}